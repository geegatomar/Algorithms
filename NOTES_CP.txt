---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MATH FOR CP

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Fermats Little Theorem (used to calculate numbers to very high powers, modulo a prime number)
	
	A ^ (M-1) mod M = 1				(Note M (the modulo number) should be prime)
	
ex:
	We want to calculate (2 ^ (16)) mod (17), it would be 1
	
	Now if we want (2 ^ (50)) mod (17), then we'll factorize the exponent(power) as:
		2 ^ 50  ==  2 ^ (16*3 + 2)  ==   2^16  + 2^2  == 2^2
		
		Hence the answer is contributed only by the remainder of exponent with modulo (M - 1)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Euclidean Algorithm
 
Logarithmic way of finding the gcd in log(min(a, b)) time

	gcd(a, b) ===> return b ? return (b, a % b) : a;
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Extended Euclidean Algorithm


int gcd(int a, int b, int &x, int &y)
{
    cout << a << " " << b << endl;
    if(b == 0)
    {
        x = 1;
        y = 0;
        return a;
    }
    int x1, y1;
    int g = gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1*(a / b);

    return g;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Linear Diophantine equation


For finding the solutions (x, y) to the equation:
	ax + by = c			(where a, b, c are constants)
	
From the extended euclidean algorithm, we can say that this eqn has a solution only if c is a a multiple of the gcd(a, b).
So the solutions for a(x0 * c/g) + b(y0 * c/g) = g * c/g
	would be x0 * c/g and y0 * c/g
	
So the other solutions are obtained from x0*c/g + b*c/g    and   y0*c/g - a*c/g

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
Sieve of Erasthosenes


void sieve(int n)
{
    for(int i = 2; i <= sqrt(n); i++)
    {
        if(prime[i])
        {
            for(int j = i*i; j <= n; j += i)
                prime[j] = false;
        }
    }
}
	

Finds all prime numbers upto n in O(n loglogn) time

The outer loop can also go upto just sqrt(n) [though this will not improve time complexity since theres a logarithmic term]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Segmented Seive

To find the prime numbers in a given range, given R-L < 10^6   (though R and L can be ~~10^15)

First, get all the primes in range between 2 to sqrt(R), (this can be done using normal sieve)
Then mark all the multiples of these primes in the range L to R, again using the normal sieve method

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

To check if number is prime or not

Naive algo, iterate and check if (n % i == 0) 		==> O(sqrt(n))
Using sieve of erasthosenes, 				==> O(n loglogn)
Fermat primality test					==> O()     
	By fermats thrm, 	(a^p - a)mod p == 0	,	a^(p - 1) modp == 1	for p prime
	
	[if (a^p - a)mod p is 0 then its most likely that p is prime, but we cannot say for sure(since it mayy be possible for a composite too.
	But if this value is not zero, then for sure its composite, and is not prime]
Miller Rabin Primality Test				==> O(logn)


Both Fermat and Miller Rabin test for "if number is definitely not prime". We say that its probably prime with these theorems, but we are not 100% sure.
And they can for sure detect a composite number

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Euler Totient Function(ETF)

Its used to find the number of integers from 2 to n, which are coprime with n. Also, for prime number n, the euler totient function of n will be n - 1.

Naive, iterate over and check gcd to be 1 with n 					=> O(nlogn)
It can be done by prime factorizing and expressing as product of those primes  	=> O(sqrt(n))

To find ETF for each number from 1 to n:
	naive, using the sqrt above for each	=> O(n sqrt(n))
	using the sieve like method 		=> O(n loglogn)


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

